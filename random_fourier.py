import numpy.random as npr
import numpy as np
import numpy.matlib
from scipy.stats import norm
from matrix2 import matrix2
from repmat import repmat


def random_fourier_features(x, w=None, b=None, num_f=None, sigma=None, seed=None):
    if (num_f is None):
        num_f = 25

    # if x is a vector make it a (n,1)
    x = matrix2(x)
    r = x.shape[0]  # n => datapoints
    try:
        c = x.shape[1]    # D => dimension of variable
    except:
        c = 1
    if((sigma is None) or (sigma == 0)):
        sigma = 1

    if(w is None):
        # if(sigma is None):
        #     sigma = 1

        # set the seed to seed
        if(seed is not None):
            npr.seed(seed)
            # rng = np.random.RandomState(4242)

        # Generate normal(0,1) with (num_f*c) values
        # Shape w: (num_f, c)
        # mat1 = np.linspace(1,num_f*c, num_f*c)
        # mat1 = np.array([0.407143375,-0.082946433,-0.531864996,0.375997530,0.659402372,2.098584238,0.413929300,-0.345054296,-0.809902206,-0.172774349,0.901494800,1.812771780,0.263626838,-0.769907790,-0.423588000,0.176713358,0.527971241,-0.732369358,0.919292755,-0.305950106,-2.522914162,1.244910813,0.187508545,0.368896830,0.397140381,0.249515699,-0.370206911,0.333101938,-0.872693782,-1.663996680,2.671323186,1.327697734,1.144271466,-1.692336940,-0.662809269,0.639971070,-1.345148178,-0.204515901,-1.047413260,0.862253046,-0.968340676,-0.157516137,0.202941717,0.909875126,0.058747322,-0.194787798,-1.344127808,-0.288276512,-0.732177922,0.418895242,-1.589930857,-0.497428579,1.514089693,-0.428010015,0.268634489,1.447049586,-0.649677728,1.137384395,0.321909286,-2.464546819,1.349033667,-0.873233419,-1.883680670,1.671276385,0.155927838,1.133507316,0.476693365,-0.074524124,0.917279582,0.477007669,0.026339152,1.653451141,-0.682363769,0.627757840,1.197442049,0.006848126,-0.630634922,-0.911413939,0.416048339,0.500866745,-0.854716354,-0.076653883,-0.742578015,0.360453981,0.163653745,-2.639027148,-0.182713318,-0.462752470,-0.001230553,2.975740818,-0.371817982,-0.594099092,0.085438228,0.324588935,1.229146671,-0.032959963,0.669224625,-0.455084088,1.053485663, 0.147200136])[:num_f*c]
        # mat1 = mat1.reshape(num_f,c,order='F')
        # w = (1/sigma)*mat1
        # w=(1/sigma)*matrix(rnorm(num_f*c),num_f,c)
        # w = (1/sigma)*npr.normal(0, 1, size=(num_f, c))
        # w = (1/sigma)*npr.normal(0, 1, size=(num_f, c))
        w = (1/sigma)*norm.rvs(size=(num_f*c))
        w = w.reshape(num_f,c,order='F')
        # print("w: ")
        # print(w)
        # print("mat1: ",mat1)
        
        # set the seed to seed
        if(seed is not None):
            npr.seed(seed)
            # rng = np.random.RandomState(4242)

        # Create a row vector b of (1,r) with each value is in the range of 0 to 2*pi
        # Shape of b = (num_f,n)
        # mat2 = np.linspace(1,num_f,num_f)
        # mat2 = np.array([0.24943679,0.40272681,0.41300218,0.82630648,0.36161763,0.38695633,0.85242333,0.36338912,0.23988081,0.80964438,0.81575349,0.72413504,0.32132191,0.26886340,0.19413426,0.53087783,0.36558392,0.72362623,0.70754074,0.45836723,0.77368370,0.21385798,0.10236606,0.74187866,0.36907791,0.24600552,0.54610607,0.10645538,0.41616002,0.97929398,0.61088091,0.95699205,0.96829693,0.22630670,0.36389070,0.64923356,0.11070161,0.04423031,0.55400297,0.07435684,0.25138274,0.23333400,0.26340102,0.36885784,0.72959285,0.05182755,0.59379937,0.42187447,0.17050232,0.32351448,0.20207343,0.07066087,0.68936197,0.19694862,0.16783700,0.91276181,0.04259594,0.02395041,0.99855848,0.46649448,0.43413134,0.81925986,0.79406436,0.28507148,0.50012750,0.88732619,0.03500649,0.72745815,0.20996937,0.36801534,0.90235485,0.48449460,0.80850847,0.14072908,0.03380254,0.69850162,0.30375908,0.55768037,0.20166871,0.75252968,0.86096782,0.46792307,0.11829211,0.20294106,0.07646112,0.87190160,0.48387409,0.66052781,0.69248624,0.84302903,0.70422853,0.69536521,0.42998258,0.41419061,0.79888090,0.86357834,0.80078755,0.96816220,0.73031027,0.61615044])[:num_f]
        # b = np.repeat(2*np.pi*mat2[:,np.newaxis],r,axis=1)
        # b = repmat(2*np.pi*mat2, 1, r)
        # b = repmat(2*np.pi*npr.uniform(size=num_f), 1, r)
        # b = npr.uniform(0, 2*np.pi, size=num_f)
        # b = rng.uniform(size=num_f)
        b = npr.uniform(size=num_f)
        b = np.repeat(2*np.pi*b[:,np.newaxis],r,axis=1)
        # b = np.round(b,decimals=6)
        # print("b: ")
        # print(b)
        
        
# (n,)
    # zω(x) = √2 cos(ω'x+b)
    # Shape of feat = (n, num_f)
    # feat = sqrt(2)*t(cos(w[1:num_f,1:c]%*%t(x)+b[1:num_f,]));
    # x = x.reshape(c, r)
    # n1 = 1./np.sqrt(num_f)
    feat = np.sqrt(2)*((np.cos(w[:num_f, :c] @ x.T + b[:num_f, :])).T)
    # feat = n1 * np.sqrt(2) * np.cos(sigma*w @ x.T + b).T
    # print("feat: ",feat.shape)
    # print(feat)
    return (feat, w, b)